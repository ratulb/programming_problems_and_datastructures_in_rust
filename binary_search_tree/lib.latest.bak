use std::cell::RefCell;
use std::rc::{Rc, Weak};

#[derive(Debug)]
pub struct BSTree<T: Ord + Default>(Option<Rc<RefCell<Node<T>>>>);

#[derive(Debug, Default)]
struct Node<T: Ord> {
    key: T,
    cell: Option<Rc<RefCell<Node<T>>>>,
    left: Option<Rc<RefCell<Node<T>>>>,
    right: Option<Rc<RefCell<Node<T>>>>,
    parent: Option<Weak<RefCell<Node<T>>>>,
}

impl<T: Ord + Default> Node<T> {
    /***pub fn new(value: T) -> Rc<RefCell<Self>> {
    Rc::new(RefCell::new(Self {
        key: value,
        cell: None,
        left: None,
        right: None,
        parent: None,
    }))***/
    pub fn new(value: T) -> Self {
        Self {
            key: value,
            cell: None,
            left: None,
            right: None,
            parent: None,
        }
    }

    fn flip(&mut self, to_cell: bool) {
        if to_cell && self.cell.is_none() {
            self.cell = Some(Rc::new(RefCell::new(std::mem::take(self))));
        } else if !to_cell && self.cell.is_some() {
            *self = match self.cell {
                Some(ref mut cell) => cell.replace(Node::default()),
                None => return,
            }
        }
    }

    fn evict_left(&mut self) -> Option<T> {
        self.left.take().map(|cell| cell.take().key)
    }

    fn swap_right_to_left(&mut self) {
        self.left = self.right.take();
    }

    fn set_parent(&mut self, new_node: &mut RefCell<Node<T>>) {
        new_node.borrow_mut().parent = match self.cell {
            Some(ref rc) => Some(Rc::downgrade(&Rc::clone(rc))),
            None => None,
        };
    }

    pub fn insert(&mut self, value: T) {
        self.flip(false); //Normal state
        if value < self.key {
            match self.left {
                Some(ref mut left) => Self::insert(&mut left.borrow_mut(), value),
                None => {
                    let mut new_node = RefCell::new(Node::new(value));
                    self.flip(true); //Cell state
                    self.set_parent(&mut new_node);
                    self.left = Some(Rc::new(new_node));
                    self.cell = Some(Rc::new(RefCell::new(std::mem::take(self))));
                    //self.flip(false);
                }
            }
        } else if value > self.key {
            match self.right {
                Some(ref mut right) => Self::insert(&mut right.borrow_mut(), value),
                None => {
                    let mut new_node = RefCell::new(Node::new(value));
                    self.flip(true); //Cell state
                    self.set_parent(&mut new_node);
                    self.right = Some(Rc::new(new_node));
                    self.cell = Some(Rc::new(RefCell::new(std::mem::take(self))));
                    //self.flip(false);
                }
            }
        }
    }

    /***pub fn insert(&mut self, value: T) {
        if self.key > value {
            match self.left {
                Some(ref mut left) => {
                    Self::insert(&mut left.borrow_mut(), value);
                }
                None => {
                    let mut new_node = Rc::new(RefCell::new(Node::new(value)));
                    //let parent_ref = Rc::new(RefCell::new(Rc::clone(self)));
                }
            }
        } else if self.key < value {
        }
    }***/
}

/***impl<T: Ord> BSTree<T> {
    pub fn empty() -> Self {
        BSTree(None)
    }

    pub fn new(value: T) -> Self {
        BSTree(Some(Rc::new(RefCell::new(Node::new(value)))))
    }

    pub fn insert(&mut self, value: T) {
        match self.0 {
            None => self.0 = Some(Rc::new(RefCell::new(Node::new(value)))),
            Some(ref mut node) => {
                let mut node = node.borrow_mut();
                if value < node.key {
                    match node.left {
                        Some(ref mut l) => Self::insert(&mut l.borrow_mut(), value),
                        None => {
                            let mut new_node = Rc::new(RefCell::new(Node::new(value)));
                            /***let parent_ref  = match self {
                               BSTree(Some(_)) => todo!(),//Rc::downgrade(&Rc::clone(this)),
                               BSTree(None) => todo!(),
                            };***/
                        }
                    }
                }
            }
        }
    }
}***/

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_node() {
        let mut node = Node::new(100);
        node.insert(200);
        node.insert(400);
        println!("The node is = {:?}\n\n\n", node);
        //node.flip(false);
        //println!("The node is = {:?}\n", node);
        //node.flip(false);
        println!("The node is = {:?}\n", node);

        /***
        node.borrow_mut().flip(true);
        println!("The node is = {:?}\n", node);

        node.borrow_mut().flip(false);
        println!("The node is = {:?}\n", node);***/
    }
}
