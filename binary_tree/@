#[derive(Debug, Clone, PartialEq)]
pub struct Node<K: Ord> {
    pub val: K,
    pub left: Option<Box<Node<K>>>,
    pub right: Option<Box<Node<K>>>,
}
impl<K: Ord + Clone> Node<K> {
    #[inline]
    pub fn new(val: K) -> Self {
        Node {
            val,
            left: None,
            right: None,
        }
    }

    pub fn insert(&mut self, value: K) {
        if value < self.val {
            match self.left {
                Some(ref mut left) => left.insert(value),
                None => self.left = Some(Box::new(Node::new(value))),
            }
        } else {
            match self.right {
                Some(ref mut right) => right.insert(value),
                None => self.right = Some(Box::new(Node::new(value))),
            }
        }
    }
    pub fn exists(&self, key: K) -> bool {
        if self.val == key {
            return true;
        } else if self.val < key {
            match self.right {
                Some(ref right) => right.exists(key),
                None => false,
            }
        } else {
            match self.left {
                Some(ref left) => left.exists(key),
                None => false,
            }
        }
    }

    pub fn find(&self, key: K) -> Option<Self> {
        if key == self.val {
            let left = match self.left {
                Some(ref left) => Some(Box::new(*left.clone())),
                None => None,
            };
            let right = match self.right {
                Some(ref right) => Some(Box::new(*right.clone())),
                None => None,
            };
            let node = Node {
                val: key,
                left: left,
                right: right,
            };
            return Some(node);
        } else if key > self.val {
            return match self.right {
                Some(ref right) => right.find(key),
                None => None,
            };
        } else {
            return match self.left {
                Some(ref left) => left.find(key),
                None => None,
            };
        }
    }
    pub fn in_order(&self) {
      if let Some(ref left) = self.left {
          left.in_order();
      }
      println!("{:?}", self.val);
      if let Some(ref right) = self.right {
          right.in_order();
      }
    }
}
/***impl Solution {
    pub fn sorted_array_to_bst(nums: Vec<i32>) -> Option<Box<Node>>> {

    }
}***/

#[cfg(test)]
mod tests {
    use super::Node;
    #[test]
    fn test_tree_node() {
        let mut tree_node = Node::new(1);
        tree_node.insert(8);
        tree_node.insert(100);
        tree_node.insert(50);
        assert_eq!(tree_node.exists(1), true);
        assert_eq!(tree_node.exists(50), true);
        assert_eq!(tree_node.exists(100), true);
        assert_eq!(tree_node.exists(8), true);
        assert_eq!(tree_node.exists(9), false);
        let node = tree_node.find(100);
        println!("{:?}", node);
        println!("{:?}", tree_node);

        let other = tree_node.clone();

        assert_eq!(tree_node, other);
    }
}
